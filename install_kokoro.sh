#!/bin/bash

# Kokoro TTS Installation Script
# This script installs Kokoro TTS outside the main Walls project directory
# to keep the repository clean and avoid licensing issues

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WALLS_DIR="$(cd "$(dirname "$0")" && pwd)"

echo -e "${BLUE}Kokoro TTS Installation Script${NC}"
echo -e "${BLUE}================================${NC}"
echo ""
echo "This script will install Kokoro TTS via pip"
echo "Walls project directory: $WALLS_DIR"
echo ""

# Check if git is installed
if ! command -v git &> /dev/null; then
    echo -e "${RED}Error: git is not installed. Please install git first.${NC}"
    exit 1
fi

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Error: Python 3 is not installed. Please install Python 3 first.${NC}"
    exit 1
fi

# Kokoro installation check is now handled within install_kokoro function

# Function to install Kokoro TTS
install_kokoro() {
    echo -e "${BLUE}Installing Kokoro TTS...${NC}"
    
    # Check if already installed
    if python3 -m pip show kokoro > /dev/null 2>&1; then
        echo -e "${YELLOW}Kokoro is already installed${NC}"
        read -p "Do you want to reinstall? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${GREEN}Installation cancelled.${NC}"
            return 0
        fi
    fi
    
    # Install kokoro via pip
    echo -e "${YELLOW}Installing Kokoro TTS via pip...${NC}"
    if ! python3 -m pip install "kokoro>=0.9.4"; then
        echo -e "${RED}Failed to install Kokoro via pip${NC}"
        return 1
    fi
    
    # Install additional dependencies
    echo -e "${YELLOW}Installing additional dependencies...${NC}"
    if ! python3 -m pip install soundfile; then
        echo -e "${RED}Failed to install additional dependencies${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Kokoro TTS installed successfully!${NC}"
}

# Function to create configuration file
create_config() {
    echo -e "${BLUE}Creating configuration file...${NC}"
    
    # Create voice_mode directory if it doesn't exist
    mkdir -p "$WALLS_DIR/ai_interface/voice_mode"
    
    # Create kokoro_config.py
    cat > "$WALLS_DIR/ai_interface/voice_mode/kokoro_config.py" << 'EOF'
"""Kokoro TTS Configuration

This file is automatically generated by the Kokoro installer.
Kokoro TTS is installed via pip and should be available system-wide.
"""

# Kokoro is installed via pip, no additional path configuration needed
KOKORO_INSTALLED_VIA_PIP = True

try:
    import kokoro
    KOKORO_AVAILABLE = True
except ImportError:
    KOKORO_AVAILABLE = False
    print("Warning: Kokoro not found. Please run: pip install kokoro>=0.9.4")
EOF
    
    echo -e "${GREEN}✓ Configuration created${NC}"
    return 0
}

# Function to update Kokoro service
update_kokoro_service() {
    echo -e "${BLUE}Updating Kokoro service to use external installation...${NC}"
    
    SERVICE_FILE="$WALLS_DIR/ai_interface/voice_mode/services/kokoro_service.py"
    
    if [ -f "$SERVICE_FILE" ]; then
        # Create backup
        cp "$SERVICE_FILE" "$SERVICE_FILE.backup"
        
        # Update the service file to use external Kokoro installation
        python3 << EOF
import re

with open('$SERVICE_FILE', 'r') as f:
    content = f.read()

# Add import for kokoro_config at the top
if 'from ..kokoro_config import' not in content:
    # Find the first import line and add our import after it
    lines = content.split('\n')
    for i, line in enumerate(lines):
        if line.startswith('import ') or line.startswith('from '):
            lines.insert(i + 1, 'from ..kokoro_config import is_kokoro_available, get_kokoro_module_path')
            break
    content = '\n'.join(lines)

# Update the try-except block for importing kokoro
old_import = '''try:
    import kokoro
except ImportError:
    kokoro = None'''

new_import = '''try:
    kokoro_path = get_kokoro_module_path()
    if kokoro_path and is_kokoro_available():
        import sys
        if kokoro_path not in sys.path:
            sys.path.insert(0, kokoro_path)
        import kokoro
    else:
        kokoro = None
except ImportError:
    kokoro = None'''

if old_import in content:
    content = content.replace(old_import, new_import)

with open('$SERVICE_FILE', 'w') as f:
    f.write(content)
EOF
        
        echo -e "${GREEN}Kokoro service updated successfully!${NC}"
    else
        echo -e "${YELLOW}Warning: Kokoro service file not found. Skipping update.${NC}"
    fi
}

# Function to test installation
test_installation() {
    echo -e "${YELLOW}Testing Kokoro installation...${NC}"
    
    # Test if we can import Kokoro
    python3 -c "
try:
    import kokoro
    from kokoro import KPipeline
    print('Testing basic Kokoro functionality...')
    pipeline = KPipeline(lang_code='a')
    print('✓ Kokoro installation verified!')
    print('✓ KPipeline can be initialized successfully')
except ImportError as e:
    print(f'✗ Kokoro import failed: {e}')
    print('Please run: pip install kokoro>=0.9.4')
    exit(1)
except Exception as e:
    print(f'✗ Installation test failed: {e}')
    exit(1)
" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Kokoro installation test passed!${NC}"
        return 0
    else
        echo -e "${RED}✗ Kokoro installation test failed${NC}"
        return 1
    fi
}

# Function to show usage instructions
show_usage() {
    echo ""
    echo -e "${GREEN}Installation completed!${NC}"
    echo ""
    echo -e "${BLUE}Kokoro TTS has been installed via pip${NC}"
    echo -e "${BLUE}Configuration file created at:${NC} $WALLS_DIR/ai_interface/voice_mode/kokoro_config.py"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo "1. Test the voice mode in your Walls application"
    echo "2. Kokoro models will be downloaded automatically when first used"
    echo "3. The installation is system-wide and available to all Python environments"
    echo ""
    echo -e "${YELLOW}To uninstall Kokoro TTS:${NC}"
    echo "  pip uninstall kokoro"
    echo "  rm $WALLS_DIR/ai_interface/voice_mode/kokoro_config.py"
    echo ""
}

# Main installation process
main() {
    check_existing_installation
    install_kokoro
    create_config
    update_kokoro_service
    test_installation
    show_usage
}

# Run main function
main