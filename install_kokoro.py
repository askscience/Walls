#!/usr/bin/env python3
"""
Kokoro TTS Installation Script
This script installs Kokoro TTS outside the main Walls project directory
to keep the repository clean and avoid licensing issues.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import platform

# Configuration
WALLS_DIR = Path(__file__).parent.absolute()

# Kokoro is now installed via pip - no separate installation directory needed

# Colors for terminal output
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    NC = '\033[0m'  # No Color
    
    @classmethod
    def disable_on_windows(cls):
        """Disable colors on Windows if not supported"""
        if platform.system() == "Windows":
            cls.RED = cls.GREEN = cls.YELLOW = cls.BLUE = cls.NC = ''

def print_colored(message, color=Colors.NC):
    """Print colored message"""
    print(f"{color}{message}{Colors.NC}")

def check_dependencies():
    """Check if required dependencies are installed"""
    print_colored("Checking dependencies...", Colors.BLUE)
    
    # Check git
    try:
        subprocess.run(["git", "--version"], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print_colored("Error: git is not installed. Please install git first.", Colors.RED)
        return False
    
    # Check Python
    if sys.version_info < (3, 7):
        print_colored("Error: Python 3.7 or higher is required.", Colors.RED)
        return False
    
    print_colored("✓ All dependencies are available", Colors.GREEN)
    return True

def check_existing_installation():
    """Check if Kokoro is already installed via pip"""
    try:
        result = subprocess.run([
            sys.executable, "-m", "pip", "show", "kokoro"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_colored("Kokoro is already installed via pip", Colors.YELLOW)
            response = input("Do you want to reinstall? (y/N): ").strip().lower()
            if response != 'y':
                print_colored("Installation cancelled.", Colors.GREEN)
                return False
    except Exception:
        pass  # Not installed, continue
    
    return True

def install_kokoro():
    """Install Kokoro TTS using pip"""
    print_colored("Installing Kokoro TTS...", Colors.BLUE)
    
    try:
        # Check if kokoro is already installed
        result = subprocess.run([
            sys.executable, "-m", "pip", "show", "kokoro"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_colored("Kokoro is already installed", Colors.YELLOW)
            response = input("Do you want to reinstall? (y/N): ").strip().lower()
            if response != 'y':
                print_colored("Installation cancelled.", Colors.GREEN)
                return True  # Already installed, consider it success
        
        # Install kokoro via pip
        print_colored("Installing Kokoro TTS via pip...", Colors.YELLOW)
        subprocess.run([
            sys.executable, "-m", "pip", "install", "kokoro>=0.9.4"
        ], check=True)
        
        # Install additional dependencies
        print_colored("Installing additional dependencies...", Colors.YELLOW)
        subprocess.run([
            sys.executable, "-m", "pip", "install", "soundfile"
        ], check=True)
        
        print_colored("✓ Kokoro TTS installed successfully!", Colors.GREEN)
        return True
        
    except subprocess.CalledProcessError as e:
        print_colored(f"Error during installation: {e}", Colors.RED)
        return False
    except Exception as e:
        print_colored(f"Unexpected error: {e}", Colors.RED)
        return False

def create_config():
    """Create kokoro_config.py file for pip installation."""
    print_colored("Creating configuration file...", Colors.BLUE)
    
    config_file = WALLS_DIR / "ai_interface" / "voice_mode" / "kokoro_config.py"
    config_file.parent.mkdir(parents=True, exist_ok=True)
    
    config_content = '''# Kokoro TTS Configuration
# This file is auto-generated by install_kokoro.py
# Kokoro TTS is installed via pip and should be available system-wide.

# Kokoro is installed via pip, no additional path configuration needed
KOKORO_INSTALLED_VIA_PIP = True

try:
    import kokoro
    KOKORO_AVAILABLE = True
except ImportError:
    KOKORO_AVAILABLE = False
    print("Warning: Kokoro not found. Please run: pip install kokoro>=0.9.4")
'''
    
    with open(config_file, 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print_colored(f"✓ Configuration file created at {config_file}", Colors.GREEN)
    return True

# Kokoro service is already configured for pip installation
# No service update needed

def test_installation():
    """Test Kokoro installation."""
    print_colored("Testing Kokoro installation...", Colors.YELLOW)
    
    try:
        # Test import
        import kokoro
        from kokoro import KPipeline
        
        # Test basic functionality
        print_colored("Testing basic Kokoro functionality...", Colors.YELLOW)
        pipeline = KPipeline(lang_code='a')
        
        print_colored("✓ Kokoro installation verified!", Colors.GREEN)
        print_colored("✓ KPipeline can be initialized successfully", Colors.GREEN)
        return True
            
    except ImportError as e:
        print_colored(f"✗ Kokoro import failed: {e}", Colors.RED)
        print_colored("Please run: pip install kokoro>=0.9.4", Colors.YELLOW)
        return False
    except Exception as e:
        print_colored(f"✗ Installation test failed: {e}", Colors.RED)
        return False

def show_usage():
    """Show usage instructions"""
    print()
    print_colored("Installation completed!", Colors.GREEN)
    print()
    print_colored("Kokoro TTS has been installed via pip", Colors.BLUE)
    print_colored(f"Configuration file created at: {WALLS_DIR}/ai_interface/voice_mode/kokoro_config.py", Colors.BLUE)
    print()
    print_colored("Next steps:", Colors.YELLOW)
    print("1. Download Kokoro TTS models (if not included in the repository)")
    print("2. Test the voice mode in your Walls application")
    print("3. The installation is kept separate from your project for clean GitHub distribution")
    print()
    print_colored("To uninstall Kokoro TTS:", Colors.YELLOW)
    print("  pip uninstall kokoro")
    print(f"  rm {WALLS_DIR}/ai_interface/voice_mode/kokoro_config.py")
    print()

def main():
    """Main installation process"""
    # Disable colors on Windows if needed
    Colors.disable_on_windows()
    
    print_colored("Kokoro TTS Installation Script", Colors.BLUE)
    print_colored("================================", Colors.BLUE)
    print()
    print("This script will install Kokoro TTS via pip")
    print(f"Walls project directory: {WALLS_DIR}")
    print()
    
    # Check dependencies
    if not check_dependencies():
        return 1
    
    # Check existing installation
    if not check_existing_installation():
        return 0
    
    # Install Kokoro
    if not install_kokoro():
        return 1
    
    # Create configuration
    if not create_config():
        return 1
    
    # Test installation
    test_installation()
    
    # Show usage
    show_usage()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())